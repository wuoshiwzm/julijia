<?php

// use app\controllers\user\user\LeonEvent;

class CartMemberController extends \BaseController
{


    private $items;

    protected $layout = 'layouts.frontend';


    protected function setupLayout()
    {
        if (!is_null($this->layout)) {
            $this->layout = View::make($this->layout);
        }
    }

    public function view($path, $data = [])
    {
        $this->layout->content = View::make($path, $data);
    }

    /**
     * CartMemberController constructor.
     */
    function __construct()
    {
        $this->items = Cart::getContent()->get();
        parent::__construct();
    }

    /**;
     *购物车首页
     */
    function index()
    {
        //测试
        //static function addItem($userId,$entityId, $quantity, $guige = null)
        //echo json_encode(array('颜色'=>'红色','尺寸'=>'xxl','包装'=>'小包')) ;
        //Cart::updateQty('sad4',1);
        //Cart::updateQty('sad3',1);

        //测试添加商品
//        Cart::addItem(Session::get('member')->id,'1479370490',2,["size"=>"超大","color"=>"银灰"]);
//        Cart::addItem(Session::get('member')->id,'1479372520',2,["size"=>"超大","color"=>"银灰"]);
//        Cart::addItem(Session::get('member')->id,'1479970726',2,["size"=>"超大","color"=>"银灰"]);
//        Cart::addItem(Session::get('member')->id,'1480497516',2,["size"=>"超大","color"=>"银灰"]);


        //测试优惠券

//        $this->checkCoupon($money, $weight, $num, $productIds, $couponCode = '0040040041');
//        $res = $this->checkCoupon(11, 15, 2, 123123, '004004004');
//        dd($res['amount']);

        //测试商品集
//        $res = $this->checkItem();
//        dd($res);


        //测试满减
//        public function CheckDiscount($money, $weight)
//        $res = $this->CheckDiscount(1100, 1500);
//        dd($res);

        $items = $this->items;

        return $this->view('member.cart.index', compact('items'));

    }


    /**
     * @param $quoteSn删除商品
     */
    public function delItem()
    {

        $input = trimValue(Input::all());
        $rowId = decode($input['rowId']);

        $res = Cart::remove($rowId);

        if ($res) {
            $obj = new stdClass();
            $obj->status = 0;
            $obj->msg = '删除成功';
            return json_encode($obj);

        } else {
            $obj = new stdClass();
            $obj->status = 1;
            $obj->msg = '删除失败';
            return json_encode($obj);
        }

    }


    /**
     * @param $num
     * 改变购物车某项的数量
     */
    public function changeQuantity()
    {


        $input = trimValue(Input::all());

        $res = Cart::updateQty(decode($input['rowId']), $input['num']);

        if ($res == true) {
            $obj = new stdClass();
            $obj->status = 0;
            $obj->msg = '成功';
            return json_encode($obj);
        } else {
            $obj = new stdClass();
            $obj->status = 1;
            $obj->msg = '失败';
            return json_encode($obj);
        }

    }


    /**
     * 根据传入的购物车rowIds数组 返回对应的折扣信息
     */
    function checkItem()
    {

        //input: rowid数组： Input::get('rowIds') 优惠券： Input::get('coupon')

        //判断rowIds 和 coupon 是否为空数据



        //获取对应 quoteSn数组

        $input = trimValue(Input::all());
        $rowIds = $input['rowIds'];
        $couponCode = $input['couponCode'];

        if(empty($rowIds)){
            return false;
        }


        //对应总的重量
        $weight = 0;
        //对应总的价格
        $money = 0;
        //商品数量
        $num = 0;
        //商品列表
        $productIds = [];



        //对应对应总的折扣价格  减少的价格
        $discount = 0;


        foreach ($rowIds as $rowId) {
            $item = Source_Cart_CartItem::where('row_id', $rowId)->first();
            $money += $item->price * $item->num;
            $weight += $item->weight * $item->num;
            $num += $item->num;
            $productIds[] = $item->product_id;
        }

        //优惠券检测
        $couponRes = $this->checkCoupon($money, $weight, $num, $productIds,$couponCode);

        //满减检测
        $discountRes = $this->CheckDiscount($money, $weight);

        //都不为空
        if($couponRes && $discountRes){
            if($couponRes['amount'] >= $discountRes){
                return $couponRes;
            }
            return $discountRes;
        }


        //都为空
        if(!$couponRes && !$discountRes){

            return false;
        }

        return ($couponRes || $discountRes);

    }


    /**
     * @param int $weight
     * @param int $money
     * @param $couponCode
     * 总价和重量满减优惠的确认
     * 返回数组 ，如果有对应的折扣，第一个元素为生效的折扣规则，
     * 第二个元素为对应的折扣金额，如果没有生效的折扣规则则为空
     * @return array
     */
    public function CheckDiscount($money, $weight)
    {
        $result = array();
        $allrule = Source_Salerule_FavoutableRule::whereNotNull('conditions_use')
            ->where('conditions_type', 1)
            ->get();
        foreach ($allrule as $rule) {
            //from_date to_date 检测
            if (time() <= strtotime($rule->from_date) || time() >= strtotime($rule->to_date)) {
                continue;
            }

            //status 状态 1生效 0 禁止
            if ($rule->status === 0) {
                continue;
            }


            //lssue_num 发行数量


            //use_person 使用人数
            if ($rule->order->count() > 0) {
                if ($rule->order->groupBy('user_id')->count() >= $rule->userd_num) {
                    continue;
                }
            }

            //userd_num 使用次数
            if ($rule->order->count() >= $rule->userd_num) {
                continue;
            }

            //per_num 每人/每天使用
            //当天开始
            $dayStart = strtotime(date('Y-m-d', time()));
            //当天结束
            $dayEnd = date('Y-m-d H:m:s', $dayStart + 24 * 60 * 60);
            //当天开始 date-time
            $dayStart = date('Y-m-d H:m:s', $dayStart);

            if (Source_Order_OrtderFavoutable::where('pmt_id', $rule->id)
                    ->where('use_time', '>', $dayStart)
                    ->where('use_time', '<', $dayEnd)
                    ->count() >= 1
            ) {
                continue;
            }

            //conditions_type规则类型  1满减 2 优惠券 3收银台 4 礼品
            //action_type使用类型 1 固定金额 2 百分比 3 买*件折扣
            //discount_amount 折抵金额计算
            //所有规则的数组
            /**
             * array (size=4)
             * 'type' => string 'weight' (length=6)
             * 'use_tiaojian' => string 'weight' (length=6)
             * 'yunsuanfu' => string '<' (length=1)
             * 'value' => string '20' (length=2)
             */

            $rul = json_decode($rule->conditions_use);


            if ($rul->type == 'weight') {

                //重量优惠
                if ($weight . "$rul->yunsuanfu" . $rul->value) {

                    switch ($rule->conditions_type) {
                        case 1:
                            $result[] = ['rule' => $rule, 'amount' => $rule->discount_amount];
                            break;

                        case 2:
                            $result[] = ['rule' => $rule, 'amount' => $money * $rule->discount_amount];
                            break;
                        case 3:
                            break;
                    }
//                    $rule->mark = 'slakjhflksadhlfkjhasldkjfhlasjhfd';
                }
            } elseif ($rul->type == 'manjian') {
                //金额满减
                if ($money . "$rul->yunsuanfu" . $rul->value) {
                    switch ($rule->conditions_type) {
                        case 1:
                            $result[] = ['rule' => $rule, 'amount' => $rule->discount_amount];
                            break;
                        case 2:
                            $result[] = ['rule' => $rule, 'amount' => $money * $rule->discount_amount];
                            break;
                        case 3:
                            break;
                    }
                }
            }


        }


        if (!empty($result)) {

            foreach ($result as $k => $v) {

                $amount[$k] = $v['amount'];
            }

            array_multisort($amount, SORT_NUMERIC, SORT_DESC, $result);

            return $result[0];

        }

    }


    /**
     *
     *
     */
    /**
     * @param $couponCode 折扣券码
     * @param $money 总金额
     * @param $weight 总重量
     * @param $num 总商品数量
     * 折扣卷的确认
     */
    public function checkCoupon($money, $weight, $num, $productIds, $couponCode)

    {

        $rule = Source_Salerule_FavoutableRule::whereNotNull('conditions_use')
            ->where('conditions_type', 2)
            ->where('status', 1)
            ->where('rule_code', $couponCode)
            ->first();


        if (!$rule) {
            return false;
        }


        /**规则：
         * 发行数量
         *使用次数
         *每人/每天
         *开始时间
         *结束时间
         */

        //from_date to_date 检测
        if (time() <= strtotime($rule->from_date) || time() >= strtotime($rule->to_date)) {
            return false;
        }


        //lssue_num 发行数量


        //use_person 使用人数
        if ($rule->order->count() > 0) {
            if ($rule->order->groupBy('user_id')->count() >= $rule->userd_num) {
                return false;
            }
        }

        //userd_num 使用次数
        if ($rule->order->count() >= $rule->userd_num) {
            return false;
        }

        //per_num 每人/每天使用
        //当天开始
        $dayStart = strtotime(date('Y-m-d', time()));
        //当天结束
        $dayEnd = date('Y-m-d H:m:s', $dayStart + 24 * 60 * 60);
        //当天开始 date-time
        $dayStart = date('Y-m-d H:m:s', $dayStart);

        if (Source_Order_OrtderFavoutable::where('pmt_id', $rule->id)
                ->where('use_time', '>', $dayStart)
                ->where('use_time', '<', $dayEnd)
                ->count() >= 1
        ) {
            return false;
        }


        /**
         * 购物车规则:type
         *
         * 购物车小计 subtotal
         * 购物数量 number
         * 总重量 weight
         * 支付方式 payment
         * 选定产品 goods
         */

        /**
         * action_type
         *使用类型 1 固定金额 2 百分比
         */

        $rul = json_decode($rule->conditions_use);

        switch ($rul->type) {
            case 'subtotal':
                if ($money . "$rul->yunsuanfu" . $rul->value) {
                    if ($rule->action_type == 1) {
                        return ['rule' => $rule, 'amount' => $rule->discount_amount];
                    } elseif ($rule->action_type == 2) {
                        return ['rule' => $rule, 'amount' => $money * $rule->discount_amount];
                    }
                }
                break;

            case 'number':

                if ($num . "$rul->yunsuanfu" . $rul->value) {
                    if ($rule->action_type == 1) {
                        return ['rule' => $rule, 'amount' => $rule->discount_amount];
                    } elseif ($rule->action_type == 2) {
                        return ['rule' => $rule, 'amount' => $money * $rule->discount_amount];
                    }
                }
                break;

            case 'weight':


                if ($weight . "$rul->yunsuanfu" . $rul->value) {
                    if ($rule->action_type == 1) {
                        return ['rule' => $rule, 'amount' => $rule->discount_amount];
                    } elseif ($rule->action_type == 2) {
                        return ['rule' => $rule, 'amount' => $money * $rule->discount_amount];
                    }
                }
                break;

            case 'payment':
                break;

            case 'goods':

                foreach ($productIds as $productId) {
                    if ($productId . "$rul->yunsuanfu" . $rul->value) {
                        if ($rule->action_type == 1) {
                            return ['rule' => $rule, 'amount' => $rule->discount_amount];
                        } elseif ($rule->action_type == 2) {
                            return ['rule' => $rule, 'amount' => $money * $rule->discount_amount];
                        }
                    }
                }
                break;

        }


    }


}
