<?php

/**
 * Created by Tonychang
 * User: Administrator
 * Date: 2016/10/8
 * Time: 16:53
 */
class Order
{

    public static $adminPage = 10;

    /**
     * 获取未付款、待发货、已发货、成功订单个数
     */
    public static function getOrdersNumber()
    {
        $noPay = 0;
        $waiting = 0;
        $has_gone = 0;
        $success = 0;
        $all_order = 0;
        $orders = Source_Order_OrderInfo::All();
        if (!empty($orders)) {
            /*遍历订单数*/
            foreach ($orders as $order) {
                $all_order++;
                if ($order->status == 1) {
                    $noPay++;
                } else if ($order->status == 4) {
                    $waiting++;
                } else if ($order->status == 5) {
                    $has_gone++;
                } else if ($order->status == 7) {
                    $success++;
                }
            }
        }
        //返回订单
        return array(
            'all_order' => $all_order,
            'no_pay' => $noPay,
            'waiting' => $waiting,
            'has_gone' => $has_gone,
            'success' => $success
        );
    }

    /**
     * 根据不同订单状态获取订单
     * @param int $status 订单状态
     * @param int $setPage 分页数
     * @param array $column 返回字段
     * @param boolean $with 是否预加载商品
     * @return  object collection 结果集对象
     */
    public static function getOrderByStatus($status = 0, $setPage = 0, $column = array(), $with = true)
    {
        if (empty($column)) {
            $column = array(
                "order_info.id", "order_info.source", "order_info.total_amount", "order_info.cost_freight",
                "order_info.status", "order_info.order_sn", "order_info.created_at", "userinfo.real_name"
            );
        }
        /*查询*/
        $model = Source_Order_OrderInfo::leftjoin('userinfo', 'order_info.user_id', '=', 'userinfo.id');
        if ($status != 0 && is_int($status))
            $model->where("order_info.status", '=', $status);

        if (!empty($column) && is_array($column))
            $model->select($column);

        if (is_bool($with) && $with)
            $model->with("item");

        if ($setPage == 0 || !is_int($setPage))
        $setPage = self::$adminPage;

        return $model->paginate($setPage);
    }


    /**
     * @param $order_id
     * 获取对应订单id下所有商品
     */
    public static function getItemByOrder($order_id)
    {
        $items = Source_Order_OrderItem::where('order_id', $order_id);
        return $items;
    }

    /**
     * @param  int $order_id
     * @des 获取订单中信息
     * @return bool
     */
    public static function hasDeliver($order_id)
    {
        $flag = true;
        $items = Source_Order_OrderInfo::find($order_id)->item()->get();
        //遍历判断
        foreach ($items as $item) {
            if ($item->shipping_status == 1) {
                $flag = false;
                break;
            }
        }
        return $flag;
    }

    /**
     * @param $jsonData array 包含了数组id
     * @param $freight float 运费
     * @return bool
     */
    public static function saveChange($jsonData, $freight)
    {
        //开始事务
        DB::beginTransaction();
        try {
            //订单id
            $order_id = 0;
            $item_price = [];
            //遍历修改的数据
            foreach ($jsonData as $item) {
                $item_id = (int)$item->item_id;
                $discount = (float)$item->discount;
                if ($item_id != 0) {
                    $goods = Source_Order_OrderItem::find($item_id);
                    $order_id = $goods->order_id;
                    $price = $goods->price;
                    //新的价格@算法 转化成整型计算，防止有偏差
                    $diff = ($price * 100 + $discount * 100) / 100;
                    $diff < 0 ? $diff = 0 : $diff;
                    //更改后单种商品的价格
                    $item_price[] = $diff * $goods->num;
                    $goods->price = $diff;
                    //保存修改
                    $goods->save();
                }
            }
            if ($order_id == 0) {
                throw new Exception("订单数据异常");
            }
            $order = Source_Order_OrderInfo::find($order_id);
            //原价
            $cost_item = array_sum($item_price);
            //优惠价
            $cost_freight = $order->cost_freight;
            //实际应支付价格(原价+运费-优惠金额)
            $pay_amount = ($cost_item * 100 + $freight * 100 - $cost_freight * 100) / 100;
            $order->cost_item = $cost_item;
            $order->pay_amount = $pay_amount;
            $order->shipping_amount = $freight;
            //订单总价（商品价格+运费）
            $order->total_amount = $cost_item + $freight;
            $order->save();
            DB::commit();
            return true;
        } catch (Exception $e) {
            dd($e->getMessage());
            //回滚操作
            DB::rollback();
            return false;
        }
    }

    /**
     * @param  int $order_id
     * @des 获取订单中信息
     * @return bool
     */
    public static function getOrderById($order_id)
    {
        $order_id = (int)$order_id;
        if ($order_id == 0)
            return "";
        $order = Source_Order_OrderInfo::find($order_id);
        return $order;
    }

    
    public static  function  getOrderItemById($item_id)
    {
        $order_id = (int)$item_id;
        if ($order_id == 0)
            return "";
        $order = Source_Order_OrderItem::find($order_id);
        return $order;
    }

}