<?php
/**
 * Created by julijia_frontend.
 * User: 王顶峰
 * Email: dingfeng0509@vip.qq.com
 * Date: 2016/12/23
 * Time: 12:08
 */
class WechatController extends \BaseController
{

    /**
     *  ajax 替换微信图片
     */
    public function index()
    {
        $order_sn = decode(Input::get('order_sn'));
        $notifyUrl = 'http://'.$_SERVER['HTTP_HOST']."/weixin/notify";
        $orderInfo = Source_Order_OrderInfo::where('order_sn',$order_sn)->select('order_sn','pay_amount','ship_name','ship_addr','ship_phone')->first();
        $start = date("YmdHis");
        $expire = date("YmdHis",time() + 60);
        $notify = new NativePay();
        $input = new WxPayUnifiedOrder();
        $input->SetBody( '居利家商城订单' );
        $input->SetAttach("居利家微信支付");
        $input->SetOut_trade_no( $order_sn );
        $input->SetTotal_fee( $orderInfo->pay_amount*100 );
        $input->SetTime_start( $start );
        $input->SetTime_expire( $expire );
        $input->SetNotify_url( $notifyUrl );
        $input->SetTrade_type("NATIVE");
        $input->SetProduct_id( $order_sn );//产品id为订单号
        $result = $notify->GetPayUrl($input);
        $url = $result["code_url"];
        $methodType = Request::method();
        if( $methodType == 'GET' )
        {
            $this->view('frontend.order.weixin',compact('url','orderInfo'));
        }else
        {
            return '<img src="http://paysdk.weixin.qq.com/example/qrcode.php?data='.urlencode($url).'">';
        }
    }

    /**
     * @return mixed|SimpleXMLElement|string
     * 微信支付回调
     */
    public function notify()
    {
        //拿到微信回调回来的信息判断支付成功没
        $streamData = isset($GLOBALS['HTTP_RAW_POST_DATA'])? $GLOBALS['HTTP_RAW_POST_DATA'] : '';
        if(empty($streamData))
        {
            $streamData = file_get_contents('php://input');
        }
        if( $streamData !='' )
        {
            $streamData = simplexml_load_string($streamData,'SimpleXMLElement', LIBXML_NOCDATA);
            $streamData = json_decode(json_encode($streamData),true);
            if( $streamData['return_code'] == 'SUCCESS' && $streamData['result_code'] == 'SUCCESS' )
            {
                //支付成功
                return $this->payStatus( $streamData );
            }
        }else
        {
            die('faile');
        }
    }


    /**
     * @param $data
     * @return string
     * 修改订单状态
     */
    private function payStatus( $data )
    {
        //修改订单状态
        $orderInfo = Source_Order_OrderInfo::where('order_sn',$data['out_trade_no'])->first();
        if( $orderInfo->pay_status == 3 )
        {
            return 'success';
        }
        $result = DB::transaction(function() use( $orderInfo,$data )
        {
            //订单主表
            $orderInfo->payment_id = $data['transaction_id'];
            $orderInfo->pay_status = 3;
            $orderInfo->status = 4;
            $orderInfo->save();
            //写支付记录
            $orderPay = new Source_Order_OrderPayment();
            $orderPay->order_id = $orderInfo->id;
            $orderPay->payment_account = $data['openid'];
            $orderPay->payment_method = 1;
            $orderPay->payment_time = date("Y-m-d H:i:s",strtotime($data['time_end']));
            $orderPay->cc_id = $data['transaction_id'];
            $orderPay->cc_total_fee = $data['cash_fee']/100;
            $orderPay->cc_trade_no = $data['transaction_id'];
            $orderPay->cc_status = $data['result_code'];
            $orderPay->cc_time = $data['time_end'];
            $orderPay->save();
            //支付信息
            $orderPayLog = new Source_Order_OrderPaymentLog();
            $orderPayLog->order_id = $orderInfo->id;
            $orderPayLog->payment_recive = json_encode($data);
            $orderPayLog->save();
            //写订单操作表
            $orderAction = new Source_Order_OrderAction();
            $orderAction->order_id = $orderInfo->id;
            $orderAction->order_status = 4;
            $orderAction->shipping_status = 0;
            $orderAction->pay_status = 2;
            $orderAction->option_id = $orderInfo->user_id;
            $orderAction->option_name = $orderInfo->ship_name;
            $orderAction->remark = '订单支付完成'.$data['out_trade_no'];
            $orderAction->save();
            //修改产品库存
            $Item = Source_Order_OrderItem::where('order_id',$orderInfo->id)->select('product_id','num')->get();
            foreach ( $Item as $i )
            {
                $ProductFlat = Source_Product_ProductFlat::where('entity_id',$i->product_id)->select('kc_qty')->first();
                $ProductFlat->kc_qty = (int)($ProductFlat->kc_qty-$i->num);
                $ProductFlat->save();

                $Stock = Source_Product_ProductEntityStock::where('entity_id',$i->product_id)->select('stock')->first();
                $Stock->stock = (int)($Stock->stock-$i->num);
                $Stock->save();
            }
            //清理缓存
            Event::fire('admin.operational.data',array(1));
        });

        if ( is_null($result) )
        {
            return 'success';
        }else
        {
            return 'fail';
        }
    }


    /**
     * @param $orderId
     * @return string
     * 查询订单支付状态
     */
    public function getStatus( $orderId )
    {
        $user = Session::get('member');
        if( $user )
        {
            $pay_status = Source_Order_OrderInfo::where('order_sn',$orderId)->pluck('pay_status');
            return json_encode(['status'=>$pay_status]);

        }else
        {
            return Redirect::to('/member/login');
        }
    }

}