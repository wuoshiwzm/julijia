<?php

/**
 *  Class User
 *  用户业务模型
 */
class User
{

    /**
     * @param $username
     * @param $password
     * 用户登录
     */
    static function login($username, $password)
    {
        $password = encode($password);
//        dd($password);

        $user = Source_User_UserInfo::where('name', $username)->first();
        if ($user) {
            if ($password == $user->password) {
                return true;
            }
            return false;
        }
        return false;

    }


    /**
     * 返回用户列表
     * 上次交易时间
     * 交易笔数
     * orderinfo 为订单信息字段
     */
    static function userlist()
    {

        $data = Source_User_UserInfo::leftjoin('userinfo_group', 'userinfo.group_id', '=', 'userinfo_group.id')
            ->select('userinfo.name', 'userinfo.id', 'userinfo_group.name as group_name', 'userinfo.mobile_phone')
            ->get();

        foreach ($data as $v) {
            $orderinfos = $v->get();
//            $orderinfos = $v->hasOrders()->get();
            $v->orderinfo = $orderinfos ? $orderinfos : 'null';
            $v->orderCount = $orderinfos->count();
            $v->orderLasttime = $orderinfos->max('created_at');
        }
        return $data;
    }


    /**
     * @param $data
     * @return bool
     */
    static function validatorUser($data)
    {
        $rules = [
//            'name' => 'required|regex:/\w/|unique:userinfo,name',
//            'password' => 'required|min:6|same:repassword',
//            'repassword' => 'required|min:6',
//            'email' => 'required|email',
//            'office_phone' => 'min:7|max:20',
//            'mobile_phone' => 'min:7|max:20',
//            'home_phone' => 'min:|max:20',
//            'sex' => 'required',
//            'qq' => 'min:4|max:13',
//            'wechat' => 'regex:/\w/',

        ];
        $message = [

        ];

        $validator = Validator::make($data, $rules, $message);
        if ($validator->passes()) {
            return true;

        } else {
            return false;
        }
    }


    //check if the name is occupied
    static function checkName($name)
    {
        $res = Source_User_UserInfo::where('name', $name)->count();
        return $res ? true : false;
    }

    /**
     * @param $email
     * @return bool
     * check if the email is occupied
     */
    static function checkEmail($email)
    {
        $res = Source_User_UserInfo::where('email', $email)->get()->toArray();
        return $res ? true : false;
    }




    //add user to database
    static function addUser($data)
    {

        $info['name'] = $data['name'];
        $info['password'] = encode($data['password']);

//        $info['email'] = $data['email'];
//        $info['office_phone'] = $data['office_phone'];

//        $info['real_name'] = $data['real_name'];

        $info['mobile_phone'] = $data['mobile_phone'];

//        $info['home_phone'] = $data['home_phone'];
//        $info['sex'] = $data['sex'];
//        $info['qq'] = $data['qq'];
//        $info['wechat'] = $data['wechat'];


        $info['group_id'] = Source_User_UserInfoGroup::orderBy('beg_points')->first()->id;
        $info['user_points'] = 0;
        $info['pay_points'] = 0;

        return Source_User_UserInfo::create($info);
    }

    static function checkUser($data)
    {
        $name = $data['name'];
        $password = encode($data['password']);
        return Source_User_UserInfo::where('name', $name)->where('password', $password)->first() ? true : false;

    }

    static function getUserByName($username)
    {
        return Source_User_UserInfo::where('name', $username);
    }


    /**
     * @param $user_id 用户id
     * @return mixed
     *
     * 返回用户所有地址
     */
    static function getAllAddrByUser($user_id)
    {
        $addrInfo = Source_User_UserInfoAdd::where('user_id', $user_id);
        if (!$addrInfo) {
            return false;
        }
        foreach ($addrInfo as $addr) {
            $provinceId = $addr->province;
            $cityId = $addr->city;
            $districtId = $addr->district;

            $province = ($provinceId) ? self::getProv($provinceId)->province : '无省份信息';
            $city = ($cityId) ? self::getCity($cityId)->city : '无城市信息';
            $district = ($districtId) ? self::getDist($districtId)->area : '无地区信息';
            $addr->province = $province;
            $addr->city = $city;
            $addr->district = $district;
            $addr->province = $province;

        }
        return $addrInfo;

    }

    /**
     * @param $user_id
     * @return array
     * 获取当前有效的地址
     */
    static function getUsingAddrByUser($user_id)
    {
        $addrInfo = Source_User_UserInfoAdd::where('user_id', $user_id)->where('status', 1)->first();
        if (!$addrInfo) {
            $province = '未填写';
            $city = '无城市信息';
            $district = '无无地区信息';
            return [
                'province' => $province,
                'city' => $city,
                'district' => $district,
                'address' => '',
                'zip_code' => '无邮编信息'
            ];
        }
        $provinceId = $addrInfo->province;
        $cityId = $addrInfo->city;
        $districtId = $addrInfo->district;

        $province = ($provinceId) ? self::getProv($provinceId)->province : '无省份信息';
        $city = ($cityId) ? self::getCity($cityId)->city : '无城市信息';
        $district = ($districtId) ? self::getDist($districtId)->area : '无地区信息';
        $addrInfo->province = $province;
        $addrInfo->city = $city;
        $addrInfo->district = $district;
        $addrInfo->province = $province;

        return $addrInfo;

    }

    /**
     * @param $provId
     * @return mixed
     * 返回省份
     */
    static function getProv($provId)
    {
        return Source_Area_Province::find($provId);
    }

    /**
     * @param $cityId
     * @return mixed
     * 返回城市
     */
    static function getCity($cityId)
    {
        return Source_Area_City::find($cityId);
    }

    /**
     * @param $distId
     * @return mixed
     * 返回地区
     */
    static function getDist($distId)
    {
        return Source_Area_Area::find($distId);
    }

    /**
     * @param $user_id
     * @return mixed
     * 返回用户组
     */
    static function getGroup($user_id)
    {
        $userInfo = Source_User_UserInfo::find($user_id)->first();
        $group_id = $userInfo->group_id;
        return Source_User_UserInfoGroup::find($group_id);
    }


    static function calcPoint($userId)
    {

    }

    /**
     * @param $id
     * 返回当前登录的用户信息
     */
    static function userinfo($id)
    {
        return Source_User_UserInfo::find($id);
    }

    /**
     * @param $user_id
     * 返回用户信息
     */
    static function getUserinfoById($user_id)
    {
        return Source_User_UserInfo::find($user_id);
    }


    /**
     * @param $user_id
     * 返回用户所有订单信息
     */
    static function getOrdersByUser($user_id)
    {

        $data = Source_Order_OrderInfo::leftjoin('order_payment', 'order_info.id', '=', 'order_payment.order_id')
            ->where('order_info.user_id', $user_id)
            ->select('order_payment.payment_time', 'order_info.*');
        return $data;
    }

    /**
     * @param $user_id
     * 返回用户所有购物车内商品信息
     */
    static function getCartByUser($user_id)
    {
        $data = Source_Cart_CartInfo::leftjoin('quote_item', 'quote_info.id', '=', 'quote_item.quote_id')
            ->where('quote_info.user_id', $user_id)
            ->select('quote_item.*');
        return $data;
    }


    /**
     * @param $user_id
     * 返回用户所有评论
     */
    static function getCommentByUser($user_id)
    {
        $data = Source_User_UserInfoComment::where('user_id', $user_id);
        return $data;
    }

    /**
     * @param $userId用户id
     * 获取用户的收藏商品
     */
    static function getCollectByUser($userId)
    {
        return Source_User_UserInfoCollect::where('user_id', $userId);
    }


    /**
     * @param $user_id
     * @param $newPass
     * 更改密码
     */
    static function changePass($user_id, $newPass)
    {

        $user = Source_User_UserInfo::find($user_id);
        $user->password = $newPass;
        $res = $user->save();


        return $res;


    }
    


}
